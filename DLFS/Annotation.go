// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DLFS

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Annotation struct {
	_tab flatbuffers.Table
}

func GetRootAsAnnotation(buf []byte, offset flatbuffers.UOffsetT) *Annotation {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Annotation{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Annotation) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Annotation) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Annotation) Bbox(obj *BoundingBox) *BoundingBox {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(BoundingBox)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Annotation) CatId() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Annotation) MutateCatId(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *Annotation) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Annotation) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *Annotation) ImageId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Annotation) MutateImageId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *Annotation) Area() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Annotation) MutateArea(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func AnnotationStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AnnotationAddBbox(builder *flatbuffers.Builder, bbox flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(bbox), 0)
}
func AnnotationAddCatId(builder *flatbuffers.Builder, catId uint16) {
	builder.PrependUint16Slot(1, catId, 0)
}
func AnnotationAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(2, id, 0)
}
func AnnotationAddImageId(builder *flatbuffers.Builder, imageId uint64) {
	builder.PrependUint64Slot(3, imageId, 0)
}
func AnnotationAddArea(builder *flatbuffers.Builder, area float32) {
	builder.PrependFloat32Slot(4, area, 0.0)
}
func AnnotationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
