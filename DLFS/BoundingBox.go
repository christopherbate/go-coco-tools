// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DLFS

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BoundingBox struct {
	_tab flatbuffers.Struct
}

func (rcv *BoundingBox) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BoundingBox) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *BoundingBox) Y1() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *BoundingBox) MutateY1(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *BoundingBox) X1() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *BoundingBox) MutateX1(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *BoundingBox) Y2() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *BoundingBox) MutateY2(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *BoundingBox) X2() float32 {
	return rcv._tab.GetFloat32(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
func (rcv *BoundingBox) MutateX2(n float32) bool {
	return rcv._tab.MutateFloat32(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

func CreateBoundingBox(builder *flatbuffers.Builder, y1 float32, x1 float32, y2 float32, x2 float32) flatbuffers.UOffsetT {
	builder.Prep(4, 16)
	builder.PrependFloat32(x2)
	builder.PrependFloat32(y2)
	builder.PrependFloat32(x1)
	builder.PrependFloat32(y1)
	return builder.Offset()
}
