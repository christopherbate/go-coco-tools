// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DLFS

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Category struct {
	_tab flatbuffers.Table
}

func GetRootAsCategory(buf []byte, offset flatbuffers.UOffsetT) *Category {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Category{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Category) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Category) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Category) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Category) Id() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Category) MutateId(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *Category) Examples(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *Category) ExamplesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Category) MutateExamples(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *Category) NumImages() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Category) MutateNumImages(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *Category) NumAnns() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Category) MutateNumAnns(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func CategoryStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func CategoryAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func CategoryAddId(builder *flatbuffers.Builder, id uint16) {
	builder.PrependUint16Slot(1, id, 0)
}
func CategoryAddExamples(builder *flatbuffers.Builder, examples flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(examples), 0)
}
func CategoryStartExamplesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func CategoryAddNumImages(builder *flatbuffers.Builder, numImages uint64) {
	builder.PrependUint64Slot(3, numImages, 0)
}
func CategoryAddNumAnns(builder *flatbuffers.Builder, numAnns uint64) {
	builder.PrependUint64Slot(4, numAnns, 0)
}
func CategoryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
