// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DLFS

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Example struct {
	_tab flatbuffers.Table
}

func GetRootAsExample(buf []byte, offset flatbuffers.UOffsetT) *Example {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Example{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Example) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Example) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Example) FileName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Example) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Example) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Example) Annotations(obj *Annotation, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Example) AnnotationsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Example) Image(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Example) ImageLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Example) ImageBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Example) MutateImage(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Example) Width() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Example) MutateWidth(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *Example) Height() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Example) MutateHeight(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func (rcv *Example) Idx() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Example) MutateIdx(n uint64) bool {
	return rcv._tab.MutateUint64Slot(16, n)
}

func ExampleStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func ExampleAddFileName(builder *flatbuffers.Builder, fileName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(fileName), 0)
}
func ExampleAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(1, id, 0)
}
func ExampleAddAnnotations(builder *flatbuffers.Builder, annotations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(annotations), 0)
}
func ExampleStartAnnotationsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ExampleAddImage(builder *flatbuffers.Builder, image flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(image), 0)
}
func ExampleStartImageVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ExampleAddWidth(builder *flatbuffers.Builder, width uint64) {
	builder.PrependUint64Slot(4, width, 0)
}
func ExampleAddHeight(builder *flatbuffers.Builder, height uint64) {
	builder.PrependUint64Slot(5, height, 0)
}
func ExampleAddIdx(builder *flatbuffers.Builder, idx uint64) {
	builder.PrependUint64Slot(6, idx, 0)
}
func ExampleEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
